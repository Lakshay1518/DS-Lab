#include <stdio.h>
#include <stdbool.h>

#define QUEUE_SIZE 5

typedef struct {
    int items[QUEUE_SIZE];
    int front;
    int rear;
} CircularQueue;

void initializeQueue(CircularQueue *q) {
    q->front = -1;
    q->rear = -1;
}

bool isFull(CircularQueue *q) {
    return (q->rear + 1) % QUEUE_SIZE == q->front;
}

bool isEmpty(CircularQueue *q) {
    return q->front == -1;
}

void insert(CircularQueue *q, int value) {
    if (isFull(q)) {
        printf("Queue Overflow: Cannot insert %d\n", value);
    } else {
        if (isEmpty(q)) {
            q->front = 0;
        }
        q->rear = (q->rear + 1) % QUEUE_SIZE;
        q->items[q->rear] = value;
        printf("Inserted %d into the queue\n", value);
    }
}

int delete(CircularQueue *q) {
    if (isEmpty(q)) {
        printf("Queue Underflow: Cannot delete from an empty queue\n");
        return -1;
    } else {
        int deletedItem = q->items[q->front];
        if (q->front == q->rear) {
            q->front = -1;
            q->rear = -1;
        } else {
            q->front = (q->front + 1) % QUEUE_SIZE;
        }
        printf("Deleted %d from the queue\n", deletedItem);
        return deletedItem;
    }
}

void display(CircularQueue *q) {
    if (isEmpty(q)) {
        printf("Queue is empty\n");
    } else {
        printf("Queue elements: ");
        int i = q->front;
        while (true) {
            printf("%d ", q->items[i]);
            if (i == q->rear) break;
            i = (i + 1) % QUEUE_SIZE;
        }
        printf("\n");
    }
}

int main() {
    CircularQueue queue;
    initializeQueue(&queue);
    int choice, value;

    while (1) {
        printf("\nCircular Queue Operations:\n");
        printf("1. Insert\n");
        printf("2. Delete\n");
        printf("3. Display\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter a value to insert: ");
                scanf("%d", &value);
                insert(&queue, value);
                break;
            case 2:
                delete(&queue);
                break;
            case 3:
                display(&queue);
                break;
            case 4:
                printf("Exiting...\n");
                return 0;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}
